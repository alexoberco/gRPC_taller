# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gRPC_pb2 as gRPC__pb2


class StudentServiceStub(object):
    """El servicio define los métodos RPC que pueden ser llamados remotamente.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetName = channel.unary_unary(
                '/student.StudentService/GetName',
                request_serializer=gRPC__pb2.GetNameRequest.SerializeToString,
                response_deserializer=gRPC__pb2.GetNameResponse.FromString,
                )
        self.GetAverageScore = channel.unary_unary(
                '/student.StudentService/GetAverageScore',
                request_serializer=gRPC__pb2.GetAverageScoreRequest.SerializeToString,
                response_deserializer=gRPC__pb2.GetAverageScoreResponse.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/student.StudentService/GetGroup',
                request_serializer=gRPC__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=gRPC__pb2.GetGroupResponse.FromString,
                )


class StudentServiceServicer(object):
    """El servicio define los métodos RPC que pueden ser llamados remotamente.
    """

    def GetName(self, request, context):
        """Retorna el nombre completo del estudiante basado en el ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAverageScore(self, request, context):
        """Retorna el promedio de las notas de los talleres del estudiante.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Retorna el grupo de trabajo del estudiante.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StudentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetName,
                    request_deserializer=gRPC__pb2.GetNameRequest.FromString,
                    response_serializer=gRPC__pb2.GetNameResponse.SerializeToString,
            ),
            'GetAverageScore': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAverageScore,
                    request_deserializer=gRPC__pb2.GetAverageScoreRequest.FromString,
                    response_serializer=gRPC__pb2.GetAverageScoreResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=gRPC__pb2.GetGroupRequest.FromString,
                    response_serializer=gRPC__pb2.GetGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'student.StudentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StudentService(object):
    """El servicio define los métodos RPC que pueden ser llamados remotamente.
    """

    @staticmethod
    def GetName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/student.StudentService/GetName',
            gRPC__pb2.GetNameRequest.SerializeToString,
            gRPC__pb2.GetNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAverageScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/student.StudentService/GetAverageScore',
            gRPC__pb2.GetAverageScoreRequest.SerializeToString,
            gRPC__pb2.GetAverageScoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/student.StudentService/GetGroup',
            gRPC__pb2.GetGroupRequest.SerializeToString,
            gRPC__pb2.GetGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
